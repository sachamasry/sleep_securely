#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil expand-links:t f:t inline:t num:t p:nil pri:nil prop:nil
#+options: stat:t tags:t tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Sleep Securely
#+date: <2025-03-06 Thu>
#+author: Sacha
#+email: sacha@sachamasry.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 30.0.93 (Org mode 9.7.11)
#+cite_export:

* Synopsis

When a macOS system goes to sleep, it preserves the environment /exactly/ as it
was when the system sleep event was initiated. This is excellent for most
people, as it is predictable and comfortable, convenient. Power users have other
needs beyond this, often wanting alternative conveniences for their /less usual/
habits, such as muting the system (we don't know what space we'll be in next),
proactively turning off bluetooth and WiFi (reducing our security
vulnerability), as well as other conveniences.

This journal is a /literate/ journal describing the process in detail, with the
intention that it is /tangled/ into the target file.

* Basic requirements

To simplify script handling and installation, a `justfile` will be created with
basice /recipes/.

#+begin_src makefile :tangle ./justfile
[private]
@help:
	just --list

# Add shell script executable status
[private]
chmod:
	echo "==> Adding executable flag"
	sudo chmod +x ./sleep_securely.sh
	echo "--> Executable flag set"

# Install script
install: chmod
	echo "==> Installing script"
	sudo cp ./sleep_securely.sh /usr/local/bin/sleep_securely.sh
	echo "--> Script successfully installed"
#+end_src

Then, we specify the desired actions in the script file.

#+begin_src shell :tangle sleep_securely.sh
#!/bin/bash
#+end_src

As I bring work to a close in a location I felt comfortable in, and /trusted/, I
cannot know with certainty where I will be waking the system up again. As the
wireless capability comes to life, it starts out by scanning for known access
points, giving away unintended information. In the interests of reducing
exposure in unknown public settings, let's turn off the wireless network and
force a positive decision to bring it up manually when desired.

#+begin_src shell :tangle sleep_securely.sh

# Disable Wi-Fi
networksetup -setairportpower en0 off
#+end_src

In the same vein, as well as for the pure convenience of not having the laptop
try to /snatch/ bluetooth connections to headphones and mice during its sleep, I
want to bring down the bluetooth connection.

#+begin_src shell :tangle sleep_securely.sh

# Disable Bluetooth
#blueutil -p 0
#+end_src

Unmount all external currently mounted volumes. This is needed to unmount any
SSH file system mounted volumes relying on Tailscale (see below), which is why
this step /must/ run before Tailscale is taken offline. From a security
perspective, it is also desirable to unmount any external volumes /especially/
the encrypted ones, forcing me to manually remount them, reentering any
encryption keys when needed once again.

#+begin_src shell :tangle sleep_securely.sh

# Unmount all external volumes
diskutil list external | grep -E '^\/' | while read -r volume; do
    diskutil unmount "$volume"
done
#+end_src

One known issue with privacy and use of secure VPNs, is that Tailscale, while
incredibly useful, can result in alternative, unsecured, network routing. Before
going to sleep, take Tailscale offline; it's easy to take it back online when
needed again.

#+begin_src shell :tangle sleep_securely.sh

# Disable Tailscale
/Applications/Tailscale.app/Contents/MacOS/Tailscale down
#+end_src

When closing the lid, literally and figuratively, on a project, there's no way
of knowing where we'll be when we reawaken the computer. Just imagine the
embarrassment of opening the lid and a movie or song resuming at full blast in a
library, or worse, a quiet business meeting! Let's always mute the volume before
going to sleep, it's safer.

#+begin_src shell :tangle sleep_securely.sh

# Mute system volume to prevent unpleasant surprises!
osascript -e "set volume with output muted"
#+end_src
