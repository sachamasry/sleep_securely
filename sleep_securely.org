#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil expand-links:t f:t inline:t num:t p:nil pri:nil prop:nil
#+options: stat:t tags:t tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Sleep Securely
#+date: <2025-03-06 Thu>
#+author: Sacha
#+email: sacha@sachamasry.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 30.0.93 (Org mode 9.7.11)
#+cite_export:

* Synopsis

When a macOS system goes to sleep, it preserves the environment /exactly/ as it
was when the system sleep event was initiated. This is excellent for most
people, as it is predictable and comfortable, convenient. Power users have other
needs beyond this, often wanting alternative conveniences for their /less usual/
habits, such as muting the system (we don't know what space we'll be in next),
proactively turning off bluetooth and WiFi (reducing our security
vulnerability), as well as other conveniences.

This journal is a /literate/ journal describing the process in detail, with the
intention that it is /tangled/ into the target file.

* Basic requirements

To simplify script handling and installation, a `justfile` will be created with
basice /recipes/.

#+begin_src makefile :tangle ./justfile
[private]
@help:
	just --list

# Add shell script executable status
[private]
chmod:
	@echo "==> Setting executable flag"
	chmod +x ./sleep_securely.sh
	@echo "--> Executable flag successfully set\n"

# Install script
install: chmod
	@echo "==> Installing script"
	cp ./sleep_securely.sh ~/bin/sleep_securely.sh
	@echo "--> Script successfully installed\n"
#+end_src

Then, we specify the desired actions in the script file.

#+begin_src shell :tangle sleep_securely.sh
#!/bin/bash
#+end_src

Arguably the most valuable and confidential resource is the password library,
hosted on the excellent KeePassXC application. As good as it is, this
application still has to store the key somewhere in memory in exchange for
giving us quick and convenient access to the password database. Let's ensure
that this is the very first—and most important—action taken of all the security
steps. Even if all aspects of this script fail, this one is the most valuable
and impactful: kill KeePassXC, ejecting it from memory.

#+begin_src shell :tangle sleep_securely.sh

# Quit KeePassXC upon sleep
/usr/bin/killall KeePassXC
#+end_src

Prior to more destructive changes, let us also initiate a controlled quitting of
Parallels Desktop. This application is used to run any number of servers for
isolation /and/ security. Its networking is able to interfere with the
establishment of wifi connections, particularly some behind /captive/ wifi
setups, found in many coffee shops and locations advertising /free/ wireless.

#+begin_src shell :tangle sleep_securely.sh

# Tell Parallels Desktop application to quit gently, if it is already open
if pgrep -q prl_client; then
    osascript -e 'tell application "Parallels Desktop" to quit'
fi
#+end_src

As I bring work to a close in a location I felt comfortable in, and /trusted/, I
cannot know with certainty where I will be waking the system up again. As the
wireless capability comes to life, it starts out by scanning for known access
points, giving away unintended information. In the interests of reducing
exposure in unknown public settings, let's turn off the wireless network and
force a positive decision to bring it up manually when desired.

#+begin_src shell :tangle sleep_securely.sh

# Disable Wi-Fi
networksetup -setairportpower en0 off
#+end_src

In the same vein, as well as for the pure convenience of not having the laptop
try to /snatch/ bluetooth connections to headphones and mice during its sleep, I
want to bring down the bluetooth connection.

#+begin_src shell :tangle sleep_securely.sh

# Disable Bluetooth
/opt/homebrew/bin/blueutil -p 0
#+end_src

Unmount all external currently mounted volumes. This is needed to unmount any
SSH file system mounted volumes relying on Tailscale (see below), which is why
this step /must/ run before Tailscale is taken offline. From a security
perspective, it is also desirable to unmount any external volumes /especially/
the encrypted ones, forcing me to manually remount them, reentering any
encryption keys when needed once again.

#+begin_src shell :tangle sleep_securely.sh

# Unmount all external volumes
diskutil list external | grep -E '^\/' | while read -r volume; do
    diskutil unmount "$volume"
done
#+end_src

One known issue with privacy and use of secure VPNs, is that Tailscale, while
incredibly useful, can result in alternative, unsecured, network routing. Before
going to sleep, take Tailscale offline; it's easy to take it back online when
needed again.

#+begin_src shell :tangle sleep_securely.sh

# Disable Tailscale
if [ -x "/Applications/Tailscale.app/Contents/MacOS/Tailscale" ]; then
    "/Applications/Tailscale.app/Contents/MacOS/Tailscale" down
fi
#+end_src

When closing the lid, literally and figuratively, on a project, there's no way
of knowing where we'll be when we reawaken the computer. Just imagine the
embarrassment of opening the lid and a movie or song resuming at full blast in a
library, or worse, a quiet business meeting! Let's always mute the volume before
going to sleep, it's safer.

#+begin_src shell :tangle sleep_securely.sh

# Mute system volume to prevent unpleasant surprises!
osascript -e "set volume with output muted"
#+end_src

** Quit all sensitive applications

Given that it's impossible to know who will next /open/, or wake up, your
computer, it's safest to proactively /kill/ all communications applications
with confidential information.

#+begin_src shell :tangle sleep_securely.sh

# Close all email applications (MUAs)
pkill -x "Proton Mail"
pkill -x "Thunderbird"
pkill -x "thunderbird"
pkill -x "Mail"

# Close sensitive communication applications
pkill -x "Discord"
pkill -x "FaceTime"
pkill -x "Messages"
pkill -x "Microsoft Teams"
pkill -x "Signal"
pkill -x "Slack"
pkill -x "Telegram"
pkill -x "Trello"
pkill -x "Viber"
pkill -x "WhatsApp"

pkill -x "Zoom"
pkill -x "Zoom.us"
pkill -x "zoom"
pkill -x "zoom.us"
#+end_src

** Clear the clipboard

The clipboard is a wonderful thing, it's there to help us move blocks of
information around, but it is liable to store many things we don't want to
share: passwords copied from a password manager, confidential text from an email
or private message, sensitive information personally identifying you. From a
convenience standpoint, we rely on this functionality to paste /recently/ copied
text; once the system has been suspended and resumed, there is no longer a
reasonable context around what was recent.

Objectively the best thing to do is to clear the clipboard to prevent any data
leakage.

#+begin_src shell :tangle sleep_securely.sh

# Clear clipboard contents
/usr/bin/pbcopy < /dev/null
#+end_src
